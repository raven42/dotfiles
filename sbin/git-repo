#!/bin/bash
#
# This script is used to help control repository specific environment setting. It will look for a matching
# repository name and enter a new shell environment. This can also be used to clone a new repository from
# a git server somewhere and clone a given repository.
#
# The following ENV vars are needed to properly use this script:
#
# WORKSPACES - This variable is a ':' delimited list of directories where to look for a given repositories.
# Example:
#		export WORKSPACES=${HOME}:${HOME}/projects:/public/${USER}/projects
#
# WORKSPACE_SEARCH_DEPTH - This variable defines the search depth in the available WORKSPACES paths in which
# to look for valid git repositories. This means the script will search for valid git repositories a maximum
# of WORKSPACE_SEARCH_DEPTH directories deep from each workspace. If not set, this will default to a search
# depth of 5. The larger the value, the more time it will take to actually search for repositories.
# Example:
#		export WORKSPACE_SEARCH_DEPTH=5
#
# DEFAULT_GIT_SERVER - This is used when cloning a new repository. If not set, the script will query
# for the git server to connect to.
# Example:
#		export DEFAULT_GIT_SERVER=git@github.com
#
# DEFAULT_GIT_REPO - This is used when cloning a new repository. If not set, the script will query
# for the git repository to clone from. This should be of the syntax <user>/<repository>.git
# Example:
#		export DEFAULT_GIT_REPO=raven42/dotfiles.git
#

prog=`basename $0`

# Environment specific definitions
workspaces=$HOME/projects
remote_server=git@github.com
remote_repo=raven42/dotfiles.git

[[ -n "$WORKSPACES" ]] && workspaces=$WORKSPACES
[[ -n "$DEFAULT_GIT_SERVER" ]] && remote_server=$DEFAULT_GIT_SERVER
[[ -n "$DEFAULT_GIT_REPO" ]] && remote_repo=$DEFAULT_GIT_REPO

usage_string="Usage: $prog [<options>] [<repo>]

 Options:
   -remote-server <url>           - Specify the remote GIT server (default:$remote_server) when cloning
   -remote-repo <repo>            - Specify the remote GIT repo (default:$remote_repo) when cloning
   -workspaces <delimited-paths>  - Specify the workspaces to search for repositories in.
   -depth <depth>                 - Specify the depth to search in workspaces for. Larger value yeilds longer search times.
"

function usage {
	echo -e "\n${usage_string}"
}

# Initialize some defaults
debug=0
repo_match=""
num_paths=0

if [ "${WORKSPACE_SEARCH_DEPTH}" ]; then
	search_depth=${WORKSPACE_SEARCH_DEPTH}
else
	search_depth=5
fi

# Setup our command line options
sopts="hd"
lopts="help,debug,remote-server:,remote-repo:,workspaces:,depth:"

parsed_arguments=$(getopt -n $prog -o $sopts -ual $lopts -- $@)
if [[ $? -ne 0 ]]; then
	usage
	exit 1
fi

eval set -- "$parsed_arguments"

# Read in command line options
while [ $1 != -- ]; do

	case "$1" in

	--remote-server)
		remote_server=$2
		shift
		;;

	--remote-repo)
		remote_repo=$2
		shift
		;;

	--workspaces)
		workspaces=$2
		shift
		;;

	--depth)
		search_depth=$2
		shift
		;;

	-d | --debug)
		debug=1
		;;

	-h | --help)
		usage
		exit 0
		;;

	esac
	shift
done

# Read in optional arguments
if [ $# -eq 2 ]; then
	repo_path=$2
fi

[ $debug -eq 1 ] && echo "Using git_repo search [${repo_path}]..."
[ $debug -eq 1 ] && echo "Using workspaces [${workspaces}]..."

find_repo()
{
	num_paths=0
	repo_match=""

	if [ $# -gt 0 ]; then
		search_param=$1
	else
		search_param=""
	fi

	# Check if the search_param is a valid repo itself
	if [ -e ${search_param}/.git ]; then
		[ $debug -eq 1 ] && echo "git repo found at [${search_param}]. Using this path..."
		num_paths=1
		repo_match=${search_param}
		return
	fi

	# If not yet set, get the workspace paths
	if [ "$workspaces" == "" ]; then
		echo "Workspace not specified. Please enter a workspace to search for repositories: "
		read -p "WORKSPACES: " workspaces
	fi

	# If full repo path now found, search for this path in the available workspaces
	paths=$(echo $workspaces | tr ':' '\n')
	for path in $paths; do
		[ $debug -eq 1 ] && echo "Scanning for [${search_param}] in workspace [${path}] with depth [${search_depth}]..."
		if [[ $search_param == "" ]]; then
			matches=$(find $path/ -maxdepth $search_depth -type d -exec test -e '{}/.git' ';' -print -prune 2> /dev/null)
		else
			matches=$(find $path/ -maxdepth $search_depth -type d -exec test -e '{}/.git' ';' -print -prune 2> /dev/null | grep "/${search_param}$")
		fi
		for match in ${matches}; do
			[ $debug -eq 1 ] && echo " Found path ${match}..."
			[ $num_paths -gt 0 ] && repo_match+=":"
			let num_paths+=1
			repo_match+="${match}"
		done
	done

	[ $debug -eq 1 ] && echo " repo_match[$num_paths]: [$repo_match]"
}


while true; do

	find_repo $repo_path

	if [ $num_paths -eq 1 ]; then

		repo_path=$repo_match
		break

	elif [ $num_paths -gt 1 ]; then

		echo "Multiple repositories found. Please specify which repository."
		echo ""
		echo "${repo_match}" | tr ':' '\n'
		echo ""
		read -p "Please entry repository path: " repo_path

	elif [ $num_paths -eq 0 ]; then

		echo ""
		echo "Repository [$repo_path] not found"
		echo ""
		while true; do
			read -p "Would you like to create a new repository? [y/n]: " yn
			case $yn in
				[Yy]*)
					break
					;;

				[Nn]*)
					echo "Available repositories:"
					find_repo
					echo "${repo_match}" | tr ':' '\n'
					echo ""
					exit 1
					;;

				* )
					echo "Please answer yes or no."
					;;
			esac
		done

		echo ""
		echo "Available workspaces:"
		echo ""
		echo "${workspaces}" | tr ':' '\n'
		echo ""
		read -p "Which path do you want to store the new repo: " workspace_path
		echo ""

		if [ ! -d ${workspace_path} ]; then
			echo "GIT path:${workspace_path} does not exist. Unable to proceed."
			exit 1
		elif [ -d ${workspace_path}/${repo_path} ]; then
			echo "GIT repo directory [${workspace_path}/${repo_path}] already exists, but does not have a valid git repository."
			echo "Directory must not exist to create a new repository. Please specify a different path."
			exit 1
		fi

		if [ "${remote_server}" == "" ]; then
			read -p 'Please specify remote git server: ' remote_server
		fi

		while [[ "${remote_repo}" == "" ]] || [[ "${remote_repo}" =~ ":" ]]; do
			if [[ "${remote_repo}" =~ ":" ]]; then
				remote_repos=$(echo $remote_repo | tr ':' '\n')
				echo "Remote Repositories:"
				for remote in $remote_repos; do
					echo "  $remote"
				done
				echo "  .. (other known repositories)"
				echo ""
			fi
			read -p 'Please specify remote git repository: ' remote_repo
		done

		cd ${workspace_path}
		[ $debug -eq 1 ] && echo "Retrieving remote branches [git ls-remote --heads ${remote_server}:${remote_repo}]..."
		branches=$(git ls-remote --heads ${remote_server}:${remote_repo} | sed -e 's|.*refs/heads/||' | grep -v priv)
		if [ $? -ne 0 ]; then
			echo "Error retrieving branch list from remote [${remote_server}:${remote_repo}]"
			echo "Please ensure you have the proper DEFAULT_GIT_SERVER and DEFAULT_GIT_REPO environment variables defined."
			echo ""
			exit 1
		fi
		echo ""
		echo "Available branches:"
		echo ""
		echo "${branches}"
		echo ""
		read -p "Which branch do you want to clone [<enter> for default]: " branch
		echo ""
		if [ -z "${branch}" ]; then
			git clone ${remote_server}:${remote_repo} ${repo_path}
		else
			git clone -b ${branch} ${remote_server}:${remote_repo} ${repo_path}
		fi
		if [ $? -ne 0 ]; then
			echo "Clone failed. Unable to create repository."
			exit 1
		fi
		echo ""
		repo_path=${workspace_path}/${repo_path}

	else

		echo "Fatal error: Unknown error occured"
		exit 1

	fi

done

[ $debug -eq 1 ] && echo "git_repo specified [${repo_path}]..."

if [ ! -d $repo_path ]; then
	echo "GIT repository [$repo_path] not found..."
	exit 1
fi

# NOTE: This script no longer controls the GIT_REPO / GIT_ROOT / GIT_PATH env vars. This is now handled
# automatically in the git-environment.bash resource file.

# env_args="GIT_ROOT=${repo_path} GIT_PATH=$(dirname ${repo_path}) GIT_REPO=$(basename ${repo_path}) GIT_DIR=${repo_path}/.git GIT_WORK_TREE=${repo_path} ${SHELL}"
env_args="${SHELL}"

[ $debug -eq 1 ] && echo "env_args [$env_args]"

cd $repo_path
env $env_args ; exit
