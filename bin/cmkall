#!/bin/bash
#
# hello friend

user=${USER}
orig_dir=`pwd`

Usage="Crave-Make Usage: cmkall [<options>]
 Prerequisites:
   * GIT_PATH needs to be a bash environment variable set to your workspace
   * You must have been given a crave.conf file with authorization keys

 Options:
   -<platform>      compile platform(s): lando (harpoon), awing, gen6 (lando+awing),
                    dart, extn (all currently supported extension platforms)
   -dir <name>      set custom name for version-string and package directory
   -dist            compile without clean and then package the build afterwards
   -se              (requires platform option) clean, rehash, or compile se area
   -rehash          Rebuild sym-links (requires platform option, can be used with se option)
   -package         package build into: $HOME/dist/<name>
   -clone           compile and package unique '<name>_clone' build
   -clean           clean platform specific se, or dist clean
   -console         Send build output to terminal instead of a log file
   -pretend|-p      Show what commands would be run but don't execute

 Examples
   'cmkall'                     (compile all distributions)
   'cmkall -lando'              (compile only lando distribution)
   'cmkall -lando -package'     (package lando swbd)
   'cmkall -awing -dist'        (compile & package awing distribution)
   'cmkall -awing -rehash -se'  (build sym-links for awing se area only)
   'cmkall -gen6 -rehash'       (build sym-links only for lando+awing)
   'cmkall -lando -clean'       (clean build files for lando)
"

shrt_opts=p
long_opts=pretend,dist,dir:,package,clone,help,extn,skybolt,lando,gen6,awing,dart,clean,se,console,rehash

exec=
distDate=
mkpretend=0
swbd_str=""
swbd_arr=
dist_package=0
dist=0
dist_clone=""
dist_clean=0
clone=0
crave_conf=""
se_bld=0
compile=0
console=0
rehash=0
dir_name_set=0
full_swbd_list="55 62 63 61 148 156 161 165 171 173 178 188"

colorize_logs=~dh404494/bin/colorize-logs

gitRepoTime()
{
	distDate=`date '+_%y%m%d_%H%M'`
}

curTime()
{
	distDate=`date '+_%y%m%d_%H%M'`
}

add_swbd()
{
	val="$1"
	if [ "$val" == "" ]; then
		return
	fi
	if [ "$swbd_str" == "" ]; then
		swbd_str="$val"
	else
		swbd_str="$swbd_str $val"
	fi
}

print_bldlogs()
{
	print_log_done=0

	crave_pull="crave --configFile $crave_conf pull"
	bd_logs=""

	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		$exec cd ${rootDir}${VPS}/build

		# pull build_log directory regardless of print
		if [[ $exec == "" && $console == 0 ]]; then
			$exec $crave_pull swbd${swbd_arr[idx]}/build_logs &>> $dist_log
			$exec $crave_pull swbd${swbd_arr[idx]}.log &>> $dist_log
		else
			$exec $crave_pull swbd${swbd_arr[idx]}/build_logs
			$exec $crave_pull swbd${swbd_arr[idx]}.log
		fi

		# only print errors from 1 swbd
		if [[ $print_log_done == 0 ]]; then
			$exec cd ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/build_logs
			$exec grep -B 100 -A 5 -m1 " Error" * | $colorize_logs
			print_log_done=1
		fi
	done

	#$exec cd ${rootDir}${VPS}/build
	#$exec $crave_pull *.log 
}

run_build()
{
	fabos_distdir="$1"

	dist_cmd="crave --configFile $crave_conf run --"
	dist_cmd="$dist_cmd make FABOSRELEASEID=$fabos_distdir"

	if [[ $swbd_str != "" ]]; then
		dist_cmd="$dist_cmd $swbd_str"
	fi

	# execute dist build operation
	$exec cd ${rootDir}${VPS}/make
	if [[ $exec == "" && $console == 0 ]]; then
		$exec $dist_cmd &>> $dist_log
	else
		$exec $dist_cmd
	fi

	# only check for errors if no-console
	rc=`tail $dist_log | grep -i "Build Successful"`
	if [[ $rc == "" && $exec == "" && $console == 0 ]]; then

		echo "-----------------------------------------------------------------"
		echo "CRAVE BUILD OUTPUT"
		echo "-----------------------------------------------------------------"
		echo ""
		$exec tail -n 20 $dist_log

		if [[ $swbd_str != "" ]]; then
			echo ""
			echo "-----------------------------------------------------------------"
			echo "BUILD LOG SNAPSHOT"
			echo "-----------------------------------------------------------------"
			echo ""
			print_bldlogs
		fi

		echo ""
		echo "-----------------------------------------------------------------"
		echo "BUILD FAILED!"
		echo "-----------------------------------------------------------------"
		if [[ $console == 0 ]]; then
			echo "crave output: $dist_log"
			echo "build logs  : ${rootDir}${VPS}/build/swbd<#>/build_logs"
		fi
		echo "command     : $dist_cmd"
		echo ""
		exit 1
	fi
}

run_module_build()
{
	dist_cmd="crave --configFile $crave_conf"

	$exec cd ${rootDir}${VPS}/build

	# verify all build paths exist 
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		#echo "$idx" "${swbd_arr[idx]}"
		pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/build_logs/fabos_build.log"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $pull_cmd &>> /dev/null
		else
			$exec $pull_cmd
		fi

		if [ ! -d "${rootDir}${VPS}/build/swbd${swbd_arr[idx]}" ]; then
			if [[ $exec == "" ]]; then
				echo ""
				echo "Error: build path does not exist!"
				echo "     ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}"
				exit 1
			fi
		fi
	done

	# ensure dfos directories exist run make foreach swbd
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do

		$exec mkdir -p ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos
		$exec cd ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos

		mk_cmd="$dist_cmd run make"

		if [ $se_bld ]; then
			if [[ $exec == "" && $console == 0 ]]; then
				$exec $mk_cmd &>> $dist_log
			else
				$exec $mk_cmd
			fi

			# only check for errors if no-console
			rc=`tail $dist_log | grep -i "Build Successful"`
			if [[ $rc == "" && $exec == "" && $console == 0 ]]; then

				echo "-----------------------------------------------------------------"
				echo "CRAVE BUILD OUTPUT"
				echo "-----------------------------------------------------------------"
				echo ""
				$exec tail -n 20 $dist_log

				if [[ $swbd_str != "" ]]; then
					echo ""
					echo "-----------------------------------------------------------------"
					echo "BUILD LOG SNAPSHOT"
					echo "-----------------------------------------------------------------"
					echo ""
					print_bldlogs
				fi

				echo ""
				echo "-----------------------------------------------------------------"
				echo "BUILD FAILED!"
				echo "-----------------------------------------------------------------"
				if [[ $console == 0 ]]; then
					echo "crave output: $dist_log"
					echo "build logs  : ${rootDir}${VPS}/build/swbd<#>/build_logs"
				fi
				echo "command     : $dist_cmd"
				echo ""
				exit 1
			fi

			# pull down new binaries if no-console (since we cant detect compile errors)
			$exec cd ${rootDir}${VPS}/build
			if [[ $exec == "" && $console == 0 ]]; then
				pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/fabos/dfos/se/common/fcext_se"
				$exec $pull_cmd &>> /dev/null
				pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/tps/cavium/cn72xx/linux/build/extn-vmlinux.64"
				$exec $pull_cmd &>> /dev/null
			fi
		fi
	done
}

run_package()
{
	dest_dir="$1"

	#echo "clearing dist directory $HOME/dist/$dest_dir"
	$exec cd $HOME/dist
	if [ -d $dest_dir ]; then
		$exec cd $dest_dir
		$exec rm -rf *
	else
		$exec mkdir $dest_dir
	fi

	#
	# Run package command from makefile hierarchy
	#
	$exec cd ${rootDir}${VPS}/make
	dist_cmd="crave --configFile $crave_conf run make FABOSRELEASEID=$dest_dir"
	dist_cmd="$dist_cmd DISTDIR=/tmp/accupara/vobs/projects/springboard/build/dist"

	if [[ $swbd_str != "" ]]; then
		dist_cmd="$dist_cmd $swbd_str"
	fi
	dist_cmd="$dist_cmd dist"
	if [[ $exec == "" && $console == 0 ]]; then
		$exec $dist_cmd &>> $dist_log
	else
		$exec $dist_cmd
	fi

	#
	# Copy package files into local space
	#
	$exec cd ${rootDir}${VPS}/build
	dist_cmd="crave --configFile $crave_conf pull dist"
	if [[ $exec == "" && $console == 0 ]]; then
		$exec $dist_cmd &>> $dist_log
	else
		$exec $dist_cmd
	fi

	$exec cp -R ./dist/* ~/dist/$dest_dir
}

run_clean()
{
	# remove local build files
	$exec cd ${rootDir}${VPS}/build
	$exec rm -rf ./*

	# remove remote build files
	$exec cd ${rootDir}${VPS}/make
	#dist_cmd="crave --configFile $crave_conf run --clean --force ls"
	dist_cmd="crave --configFile $crave_conf run --clean ls"

	if [[ $exec == "" && $console == 0 ]]; then
		$exec $dist_cmd &>> $dist_log
	else
		$exec $dist_cmd
	fi
}

run_module_clean()
{
	dist_cmd="crave --configFile $crave_conf"

	$exec cd ${rootDir}${VPS}/build

	# verify all build paths exist 
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		#echo "$idx" "${swbd_arr[idx]}"
		pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/build_logs/fabos_build.log"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $pull_cmd &>> /dev/null
		else
			$exec $pull_cmd
		fi

		if [ ! -d "${rootDir}${VPS}/build/swbd${swbd_arr[idx]}" ]; then
			if [[ $exec == "" ]]; then
				echo ""
				echo "Error: build path does not exist!"
				echo "     ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}"
				exit 1
			fi
		fi
	done


	# run make clean foreach swbd
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		$exec mkdir -p ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos
		$exec cd ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos

		clean_cmd="$dist_cmd run make clean"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $clean_cmd &>> $dist_log
		else
			$exec $clean_cmd
		fi
	done
}

run_rehash()
{
	dist_cmd="crave --configFile $crave_conf"

	$exec cd ${rootDir}${VPS}/build

	# verify all build paths exist 
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/build_logs/fabos_build.log"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $pull_cmd &>> /dev/null
		else
			$exec $pull_cmd
		fi

		if [ ! -d "${rootDir}${VPS}/build/swbd${swbd_arr[idx]}" ]; then
			if [[ $exec == "" ]]; then
				echo ""
				echo "Error: build path does not exist!"
				echo "     ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}"
				exit 1
			fi
		fi
	done

	# run make slink for each bd
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		$exec mkdir -p ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/make
		$exec cd ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/make

		rehash_cmd="$dist_cmd run make slink BD=${swbd_arr[idx]}"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $rehash_cmd &>> $dist_log
		else
			$exec $rehash_cmd
		fi
	done
}

run_module_rehash()
{
	dist_cmd="crave --configFile $crave_conf"

	$exec cd ${rootDir}${VPS}/build

	# verify all build paths exist 
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		pull_cmd="$dist_cmd pull swbd${swbd_arr[idx]}/build_logs/fabos_build.log"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $pull_cmd &>> /dev/null
		else
			$exec $pull_cmd
		fi

		if [ ! -d "${rootDir}${VPS}/build/swbd${swbd_arr[idx]}" ]; then
			if [[ $exec == "" ]]; then
				echo ""
				echo "Error: build path does not exist!"
				echo "     ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}"
				exit 1
			fi
		fi
	done

	# run rehash for each swbd
	for ((idx=0; idx<${#swbd_arr[@]}; idx++)); do
		$exec mkdir -p ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos
		$exec cd ${rootDir}${VPS}/build/swbd${swbd_arr[idx]}/fabos/dfos

		rehash_cmd="$dist_cmd run make rehash_slink"

		if [[ $exec == "" && $console == 0 ]]; then
			$exec $rehash_cmd &>> $dist_log
		else
			$exec $rehash_cmd
		fi
	done
}

#
# ENSURE VALID GIT ENVIRONMENT
#
if [ $GIT_REPO ]; then
	gitRepoTime
	GIT_BRANCH=`git rev-parse --abbrev-ref HEAD | sed -e 's/.*\([0-9]\)\.\([0-9]\)\.\([0-9x]*\).*/v\1\2\3/'`
	if [ "${GIT_BRANCH:0:4}" == "priv" ]; then
		distDir="${GIT_BRANCH:5}${distDate}"
	else
		distDir="${user}_${GIT_BRANCH}${distDate}"
	fi
	rootDir=${GIT_ROOT}
else
	echo ""
	echo "Error: No valid GIT repo found. Please enter a valid GIT repo with "
	echo "the git_repo <repo> script so the environment can properly load."
	echo ""
	exit 1
fi

#
# SETUP BUILD LOG FILE
#
if [[  -d $GIT_ROOT/crave ]]; then
	eval "touch $GIT_ROOT/crave/latest_build.log"
else
	mkdir $GIT_ROOT/crave
	touch $GIT_ROOT/crave/latest_build.log
fi
dist_log=$GIT_ROOT/crave/latest_build.log
echo "" > $dist_log

#
# LOCATE CRAVE CONFIG
#
if [[ -f $GIT_PATH/crave.conf ]]; then
	crave_conf=$GIT_PATH/crave.conf
elif [[ -f $GIT_PATH/crave/crave.conf ]]; then
	crave_conf=$GIT_PATH/crave/crave.conf
elif [[ -f $HOME/crave.conf ]]; then
	crave_conf=$HOME/crave.conf
elif [[ -f $GIT_ROOT/crave.conf ]]; then
	crave_conf=$GIT_ROOT/crave.conf
elif [[ -f $GIT_ROOT/crave/crave.conf ]]; then
	crave_conf=$GIT_ROOT/crave/crave.conf
else
	echo "Error: Crave configuration file not found!"
	echo "       Valid path options are:"
	echo "       $GIT_PATH/crave/crave.conf"
	echo "       $GIT_PATH/crave.conf"
	echo "       $HOME/crave.conf"
	echo "       $GIT_ROOT/crave.conf"
	echo "       $GIT_ROOT/crave/crave.conf"
	exit 1
fi

VPS=/vobs/projects/springboard

startdate[0]=`date '+%h%d_20%y_%H%M'`

makeflags=

optarg=0
opts=`getopt -o $shrt_opts -ual $long_opts -- $@`
for opt in $opts
do
	#echo "opt:$opt optarg:$optarg option:$option"
	if [ $optarg -eq 1 ]; then
		case "$option" in
		
		dir)
			distDir=$opt
			;;

		esac
		optarg=0
	else
		case "$opt" in
# main options
		--dist)
			dist=1
			;;

		--dir)
			option=dir
			optarg=1
			dir_name_set=1
			;;

		--package)
			dist_package=1
			;;

		--clone)
			clone=1
			;;

		--rehash)
			rehash=1
			;;

		--pretend | -p)
			mkpretend=1
			exec=echo
			;;

# platform types
		--extn)
			add_swbd 165
			add_swbd 178
			add_swbd 188
			;;

		--skybolt)
			add_swbd 148
			;;

		--lando)
			add_swbd 165
			;;

		--gen6)
			add_swbd 165
			add_swbd 178
			;;

		--awing)
			add_swbd 178
			;;

		--dart)
			add_swbd 188
			;;

		--clean)
			dist_clean=1
			;;

		--se)
			se_bld=1
			;;

		--console)
			console=1
			;;

		--help)
			echo "$Usage"
			exit 1
			;;

		--)
			#ignore
			;;

		*)
			makeflags="$makeflags $opt"
			;;

		esac
	fi
done

if [[ $swbd_str != "" ]]; then
	swbd_arr=($swbd_str)
	swbd_str="BD='$swbd_str'"
elif [[ $se_bld == 1 || $rehash == 1 ]]; then
	echo ""
	echo "Error: SE compile & rehash options require a build platform be specified."
	exit 1
fi

# with no other options (ignore clean opt) we want to set compile flag by default
if [[ $clone == 0 && $dist_package == 0 && $rehash == 0 &&
	$dist == 0 && $se_bld == 0 && $dist_clean == 0 ]]; then
	compile=1
elif [[ $swbd_str == "" && $dist == 1 ]]; then
	compile=1
fi

_MSG="[WARNING] '-dir' option will not reflect build version string without compilation. Please use '-dist' and '-dir' options."
if [[ $dir_name_set == 1 && $compile == 0 && $dist == 0 ]]; then
	echo ""
	echo ""
	echo $_MSG
fi

###############################################################################
# START -- the start of output being printed
###############################################################################

if [[ ! -d ${rootDir}${VPS}/build ]]; then
	mkdir ${rootDir}${VPS}/build
fi

echo ""
echo "------------------------------------------------------------------------"
date_str=`date`
echo "CRAVE MAKE"
if [[ $console == 0 ]]; then
	echo "Start:$date_str"
	echo "Crave Output: $dist_log"
fi
echo ""

# clean as needed
if [[ $dist_clean == 1 && $se_bld == 0 ]]; then
	run_clean $distDir
elif [[ $dist_clean == 1 && $se_bld == 1 ]]; then
	run_module_clean $distDir
elif [[ $rehash == 1 && $se_bld == 0 ]]; then
	run_rehash
elif [[ $rehash == 1 && $se_bld == 1 ]]; then
	run_module_rehash
fi

if [ "$dist" -eq "1" ]; then
	run_build $distDir
	run_package $distDir
else
	if [[ $se_bld == 1 && $rehash == 0 ]]; then
		run_module_build
	elif [[ $compile == 1 ]]; then
		run_build $distDir
	fi

	if [[ $dist_package == 1 ]]; then
		run_package $distDir
	fi
fi

if [ "$clone" -eq "1" ]; then
	dist_clone=${distDir}_clone
	run_build $dist_clone
	run_package $dist_clone
fi

#
# REPORT RESULTS
#
date_str=`date`
echo ""
if [[ $console == 0 ]]; then
	echo "End:  $date_str"
	echo "[SUCCESS] Operation completed successfully!"
fi
#echo "          Build log: $dist_log"
if [[ $swbd_str != "" && $console == 0 ]]; then
	echo "  Distributions: $swbd_str"
fi
if [[ $dist_package == 1 || $dist == 1 ]]; then
	echo "  Dist build location: $HOME/dist/$distDir"
fi
if [ "$clone" -eq "1" ]; then
	echo "  Dist clone location: $HOME/dist/$dist_clone"
fi
echo "------------------------------------------------------------------------"

$exec cd $orig_dir
